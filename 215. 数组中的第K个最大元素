class Solution {
    // 堆排序方法
    public int findKthLargest(int[] nums, int k) {
        int res = 0;
        int index = 0;
        createHeap(nums);
        for (int i = nums.length - 1; i >= 0; i--) {
            index++;
            swap(nums, 0, i);
            if (index == k) {
                res = nums[i];
                break;
            }
            shiftDown(nums, i, 0);
        }
        return res;
    }
    public void createHeap(int[] arr) {
        for (int i = (arr.length - 1 - 1) / 2; i >= 0; i--) {
            shiftDown(arr, arr.length, i);
        }
    }

    public void shiftDown(int[] arr, int size, int index) {
        int parent = index;
        int child = parent * 2 + 1;
        while (child < size) {
            if (child + 1 < size && arr[child + 1] > arr[child]) {
                child = child + 1;
            }
            if (arr[parent] < arr[child]) {
                swap(arr, parent, child);
            } else {
                break;
            }
            parent = child;
            child = parent * 2 + 1;
        }
    }
    
    public void swap(int[] arr, int x, int y) {
        int tmp = arr[x];
        arr[x] = arr[y];
        arr[y] = tmp;
    }
}


class Solution {
    // 快速算法
    public int findKthLargest(int[] nums, int k) {
        int left = 0;
        int right = nums.length - 1;
        int tag = nums.length - k;
        while (true) {
            int index = partition(nums, left, right);
            if (index == tag) {
                return nums[index];
            } else if (index < tag) {
                left = index + 1;
            } else {
                right = index - 1;
            }
        }
    }

    private int partition(int[] array, int left, int right) {
        int baseIndex = right;
        int baseValue = array[baseIndex];
        while (left < right) {
            while (left < right && array[left] <= baseValue) {
                left++;
            }
            while (left < right && array[right] >= baseValue) {
                right--;
            }
            swap(array, left, right);
        }
        swap(array, left, baseIndex);
        return left;
    }

    private void swap(int[] array, int left, int baseIndex) {
        int tmp = array[left];
        array[left] = array[baseIndex];
        array[baseIndex] = tmp;
    }
}
