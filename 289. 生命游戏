class Solution {
    // 复制一份该数组，遍历复制的数组，从而计算每一元素周围的存活情况
    public void gameOfLife(int[][] board) {
        int rows = board.length;
        int cols = board[0].length;
        int[] tag = {0, 1, -1};// 用来辅助遍历当前元素周围的存活情况
        int[][] copyArr = new int[rows][cols];
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                copyArr[i][j] = board[i][j];
            }
        }

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {

                int countAlive = 0; // 统计当前元素周围的存活细胞

                for (int x = 0; x < 3; x++) {
                    for (int y = 0; y < 3; y++) {
                        if (!(tag[x] == 0 && tag[y] == 0)) {
                            int row = i + tag[x];
                            int col = j + tag[y];
                            if ((row < rows && row >= 0) && 
                            (col < cols && col >= 0) && (copyArr[row][col] == 1)) {
                                countAlive++;
                            }
                        }
                    }
                }
                // 满足条件则将修改原数组中该位置细胞的存活或者死亡情况
                if ((copyArr[i][j] == 1)) {
                    if (countAlive < 2 || countAlive > 3) {
                        board[i][j] = 0;
                    }
                }
                if (copyArr[i][j] == 0 && countAlive == 3) {
                    board[i][j] = 1;
                }
            }
        }
    }
}
