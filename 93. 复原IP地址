# LeetCode
力扣
class Solution {
    // 回溯算法
    public List<String> res = new ArrayList<>();
    public List<String> restoreIpAddresses(String s) {
        int len = s.length();
        if (len < 4 || len > 12) {
            return res;
        }
        List<String> list = new ArrayList<>();
        dfs(s, 0, 4, list, len);
        return res;
    }
    public void dfs(String s, int start, int tags, List<String> list, int len) {
        if (start == len) {
            if (tags == 0) {
                StringBuilder sb = new StringBuilder();
                for (String str : list) {
                    sb.append(str);
                }
                sb.deleteCharAt(sb.length() - 1);
                res.add(sb.toString());
            }
            return;
        }
        if (len - start < tags || len - start > 3 * tags) {
            return;
        }
        for (int i = 0; i < 3; i++) {
            if (start + i >= len) {
                break;
            }
            int tmp = helper(s.substring(start, start + i + 1));
            if (tmp != -1) {
                list.add(tmp + ".");
                dfs(s, start + i + 1, tags - 1, list, len);
                list.remove(list.size() - 1);
            }
        }
    }
    public int helper(String s) {
        int len = s.length();
        if (len > 1 && s.charAt(0) == '0') {
            return -1;
        }
        int sum = 0;
        for (char c : s.toCharArray()) {
            sum = (sum * 10) + (c - '0');
        }
        if (sum > 255) {
            return -1;
        }
        return sum;
    }
}
