class Solution {
    // 双指针，先进行排序，方便后序查找
    // 一共两层循环
    // 第一层找到第一个数字，第二层找到第二个数字，剩下两个数字按照二分思想查找
    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> res = new ArrayList<>();
        int len = nums.length;
        if (nums == null || len < 4) {
            return res;
        }
        Arrays.sort(nums);
        for (int i = 0; i < len - 3; i++) {
            if (i > 0 && nums[i] == nums[i - 1]) {
                continue;
            }
            // 通过最大值和最小值进行剪枝，减少循环次数
            if ((nums[i]+nums[i+1]+nums[i+2]+nums[i+3]) > target) {
                break;
            }
            if ((nums[i]+nums[len-1]+nums[len-2]+nums[len-3]) < target) {
                continue;
            }
            for (int j = i + 1; j < len - 2; j++) {
                if (j > i + 1 && nums[j] == nums[j - 1]) {
                    continue;
                }
                // 通过最大值和最小值进行剪枝，减少循环次数
                if ((nums[i]+nums[j]+nums[j+1]+nums[j+2]) > target) {
                    break;
                }
                if ((nums[i]+nums[j]+nums[len-1]+nums[len-2]) < target) {
                    continue;
                }
                int left = j + 1;
                int right = len - 1;
                int sum = 0;
                while (left < right) {
                    sum = nums[i] + nums[j] + nums[left] + nums[right];
                    if (sum == target) {
                        res.add(Arrays.asList
                        (nums[i],nums[j],nums[left],nums[right]));
                        while (left + 1 < right && nums[left + 1] == nums[left]) {
                            left++;
                        }
                        while (right - 1 > left&&nums[right - 1] == nums[right]) {
                            right--;
                        }
                        left++;
                        right--;
                    } else if (sum < target) {
                        left++;
                    } else {
                        right--;
                    }
                }
            }
        }
        return res;
    }
}
