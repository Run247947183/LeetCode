class Solution {
    // 从最后一个数开始，寻找非递增的数，假设为 x，例如 1 1 5 ，那么找到倒数第二个 1 
    // 从找到的数开始往前找到最小的但是比 x 大的数，并且他俩交换
    // 如何将 x 位置往后的数按照升序排列
    // 题目意思是：找到最小的下一个排列，下一个排列意思要比当前排列组合起来的数大
    // 并且是下一个，所以要招最小的
    class Solution {
    public void nextPermutation(int[] nums) {
        if (nums.length < 2) {
            return;
        }
        int pos = nums.length - 2;
        while (pos >= 0 && nums[pos + 1] <= nums[pos]) {
            pos--;
        }
        if (pos >= 0) {
            int i = pos + 1;
            while (i < nums.length && nums[i] > nums[pos]) {
                i++;
            }
            swap(nums, pos, i - 1);
        }
        bubbleSort(nums, pos + 1);
    }
    public void bubbleSort(int[] arr, int start) {
        for (int i = start; i < arr.length; i++) {
            for (int j = arr.length - 1; j > i; j--) {
                if (arr[j - 1] > arr[j]) {
                    swap(arr, j - 1, j);
                }
            }
        }
    }
    public void swap(int[] arr, int x, int y) {
        int tmp = arr[x];
        arr[x] = arr[y];
        arr[y] = tmp;
    } 
}

    
