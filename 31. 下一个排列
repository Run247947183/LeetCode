class Solution {
    // 从最后一个数开始，寻找非递增的数，假设为 x，例如 1 1 5 ，那么找到倒数第二个 1 
    // 从找到的数开始往前找到最小的但是比 x 大的数，并且他俩交换
    // 如何将 x 位置往后的数按照升序排列
    // 题目意思是：找到最小的下一个排列，下一个排列意思要比当前排列组合起来的数大
    // 并且是下一个，所以要招最小的
    public void nextPermutation(int[] nums) {
        if (nums.length <= 1) {
            return;
        }
        int n = nums.length - 2;
        while (n >= 0 && nums[n + 1] <= nums[n]) {
            n--;
        }
        if (n >= 0) {
            int j = nums.length - 1;
            while (j >= 0 && nums[j] <= nums[n]) {
                j--;
            }
            swap(nums, j, n);
        }
        bubbleSort(nums, n + 1);
    }
    public void bubbleSort(int[] nums, int start) {
        for (int i = start; i < nums.length; i++) {
            for (int j = nums.length - 1; j > i; j--) {
                if (nums[j - 1] > nums[j]) {
                    swap(nums, j - 1, j);
                }
            }
        }
    }
    public void swap(int[] nums, int x, int y) {
        int tmp = nums[x];
        nums[x] = nums[y];
        nums[y] = tmp;
    }
    
}


    
