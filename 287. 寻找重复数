# LeetCode
力扣
class Solution {
    public int findDuplicate(int[] nums) {
        if (nums.length == 0) {
            return 0;
        }
        for (int i = 0; i < nums.length; i++) {
            int pos = Math.abs(nums[i]);
            if (nums[pos] < 0) {
                return Math.abs(nums[i]);
            }
            nums[pos] = -nums[pos];
        }
        return 0;
    }
}

方法二：
class Solution {
    // 二分查找
    public int findDuplicate(int[] nums) {
        if (nums.length == 0) {
            return 0;
        }
        int left = 0;
        int right = nums.length - 1;
        int res = 0;
        // 这里的等于是为了防止数组中只有两个数字的情况，例如 1，1
        while (left <= right) {
            int mid = (left + right) / 2;
            int count = 0;
            for (int num : nums) {
                count += num <= mid ? 1 : 0; 
            }
            if (count <= mid) {
                left = mid + 1;
            } else {
                // 说明出现两次的数字在逻辑上的左边
                // 逻辑上指的是：按照从 1 到 n 从小到大排序好
                right = mid - 1;
                res = mid;
            }
        }
        return res;
    }
}
