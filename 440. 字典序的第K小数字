# LeetCode
力扣
class Solution {
    // 字典序：按照每个数字的前缀数字大小来排序，例如 12 小于 2，135 小于 14
    // 从 1 出发，排除以 1 开头的情况，以此类推排除 2 开头的数字等
    public int findKthNumber(int n, int k) {
        k = k - 1; // 从 1 到 n ，所以排除 0 的情况
        int cur = 1; 
        while (k > 0) {
            int count = countNum(n, cur, cur + 1);
            if (count <= k) {
                cur++; // 从 1 开头的情况，变为 2 开头的情况，以此类推
                k -= count; // 将不满足以 1 开头到 n 的数字全部排除
            } else {
                // 表示进入某个数字第二位，第三位....判断
                // 例如进入 125 中的 2 位数，也就是从 12 打头的情况判断
                cur *= 10;
                k--; // 此时只进位 1 个数
            }
        }
        return cur;
    }
    public int countNum(int n, long start, long end) {
        // 注意每次乘10，所以数字大小可能超过Integer.MAX_VALUE，要用 long
        int num = 0;// 计算以 start 打头到 n 的数量
        while (start <= n) {
            // 注意：因为 end * 10 可能超出 n 的大小，并且 n 要 + 1 ，算上 start
            num += Math.min(n + 1, end) - start;
            start *= 10;
            end *= 10;
        }
        return num;
    }
}
