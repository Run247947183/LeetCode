class Solution {
    // 核心思想：二分查找
    // 因为每一行和每一列都是有序的，通过找到整个链表的中值来判断
    // 判断小于中值的数量和 k 的关系，进一步更新 left 和 right
    // 重新计算中值，重复上述过程
    public int kthSmallest(int[][] matrix, int k) {
        int n = matrix.length;
        int left = matrix[0][0];
        int right = matrix[n - 1][n - 1];
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (helper(matrix, k, mid, n)) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        return left;
    }
    public boolean helper(int[][] matrix, int k, int mid, int n) {
        int i = n - 1;
        int j = 0;
        int num = 0;
        while (i >= 0 && j < n) {
            if (matrix[i][j] <= mid) {
                num += i + 1;
                j++;
            } else {
                i--;
            }
        }
        return num >= k;
    }
}
