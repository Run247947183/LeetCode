class Solution {
    public String intToRoman(int num) {
        int[][] tag = {{1, 5}, {10, 50}, {100, 500}, {1000, Integer.MAX_VALUE}};
        HashMap<Integer, String> map = new HashMap<>();
        helper(map);
        if (map.containsKey(num)) {
            return map.get(num);
        }
        int pos = 0; // 代表 num 遍历到哪个位置上，例如个位，十位，百位
        StringBuilder sb = new StringBuilder();
        while (num != 0) {
            int tmp = (num % 10) * (int)Math.pow(10, pos); // 还原该位置数字大小
            num /= 10;
            if (map.containsKey(tmp)) {
                sb.insert(0, map.get(tmp));
            } else {
                StringBuilder sb2 = new StringBuilder();
                if (tag[pos][1] < tmp) {
                    sb2.append(map.get(tag[pos][1]));
                    tmp -= tag[pos][1];
                }
                while (tmp > 0) {
                    sb2.append(map.get(tag[pos][0]));
                    tmp -= tag[pos][0];
                }
                sb.insert(0, sb2.toString());
            }
            pos++;
        }
        return sb.toString();
    }
    
    public void helper(HashMap<Integer, String> map) {
        map.put(1, "I");
        map.put(5, "V");
        map.put(10, "X");
        map.put(50, "L");
        map.put(100, "C");
        map.put(500, "D");
        map.put(1000, "M");
        map.put(4, "IV");
        map.put(9, "IX");
        map.put(40, "XL");
        map.put(90, "XC");
        map.put(400, "CD");
        map.put(900, "CM");
    }
}
