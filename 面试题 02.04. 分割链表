# LeetCode
力扣
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
 // 头插法，将小于 x 的节点插入头部位置，并且更新原节点引用
class Solution {
    public ListNode partition(ListNode head, int x) {
        if (head == null || head.next == null) {
            return head;
        }
        ListNode cur = head;
        while (cur.next != null) {
            if (cur.next.val < x) {
                ListNode tmp = new ListNode(cur.next.val);
                cur.next = cur.next.next;
                tmp.next = head;
                head = tmp;
            } else {
                cur = cur.next;
            }
        }
        return head;
    }
}

// 方法二：分别将小于 x 建立一个链表，和大于等于 x 的建立一个链表，最后相连接
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode partition(ListNode head, int x) {
        if (head == null || head.next == null) {
            return head;
        }
        ListNode min = new ListNode(-1);
        ListNode minTail = min;
        ListNode max = new ListNode(-1);
        ListNode maxTail = max;
        while (head != null) {
            if (head.val < x) {
                minTail.next = new ListNode(head.val);
                minTail = minTail.next;
            } else {
                maxTail.next = new ListNode(head.val);
                maxTail = maxTail.next;
            }
            head = head.next;
        }
        minTail.next = max.next;
        return min.next;
    }
}
