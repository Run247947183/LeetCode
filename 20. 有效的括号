# LeetCode
力扣
class Solution {
    public boolean isValid(String s) {
        HashMap<Character, Character> map = new HashMap<>();
        map.put(')', '(');
        map.put(']', '[');
        map.put('}', '{');
        Stack<Character> stack = new Stack<>();
        char c = 0;
        char tmp = 0;
        for (int i = 0; i < s.length(); i++) {
            c = s.charAt(i);
            if (map.containsKey(c)) {
                tmp = stack.isEmpty() ? '1' : stack.pop();
                if (tmp == map.get(c)) {
                    continue;
                }
                return false;
            } else {
                stack.push(c);
            }
        }
        return stack.isEmpty();
    }
}

方法二：
class Solution {
    public boolean isValid(String s) {
        Stack<Character> stack = new Stack<>();
        char[] chars = s.toCharArray();
        for (int i = 0; i < chars.length; i++) {
            if (stack.isEmpty()) {
                if (chars[i] == '}' || chars[i] == ']' || chars[i] == ')') {
                    return false;
                }
                stack.push(chars[i]);
            } else {
                if (chars[i] == '[' || chars[i] == '{' || chars[i] == '(') {
                    stack.push(chars[i]);
                } else if (stack.peek() == '{' && chars[i] == '}') {
                    stack.pop();
                } else if (stack.peek() == '[' && chars[i] == ']') {
                    stack.pop();
                } else if (stack.peek() == '(' && chars[i] == ')') {
                    stack.pop();
                } else {
                    return false;
                }
            }
        }
        return stack.isEmpty();
    }
}
