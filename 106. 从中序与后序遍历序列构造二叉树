# LeetCode
力扣
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    // 二叉树的后序遍历和先序遍历都有一个共同特点：能找到根节点
    // 所以中序遍历 + 先序遍历 或者 中序遍历 + 后序遍历 就能构建二叉树
    // 根据后序遍历的特点，数组的最后一个元素就为根节点
    // 找到中序遍历中根节点的位置，将整个二叉树划分成左子树和右子树
    // 然后后序遍历数组中根节点往前一个位置就为右子树的根节点，再往前一个位置就为左子树的根节点，根据这种特性，继续划分左子树和右子树的边界
    public HashMap<Integer, Integer> map = new HashMap<>();
    public int[] postorder;
    public int index = 0;
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        this.postorder = postorder;
        index = postorder.length - 1;
        int pos = 0;
        for (int a : inorder) {
            map.put(a, pos++);
        }
        return helper(0, postorder.length - 1);
    }
    public TreeNode helper(int left, int right) {
        if (left > right) {
            return null;
        }
        int rootVal = postorder[index];
        TreeNode root = new TreeNode(rootVal);
        index--;
        int pos = map.get(rootVal);
        root.right = helper(pos + 1, right);
        root.left = helper(left, pos - 1);
        return root;
    }
}
