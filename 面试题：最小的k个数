class Solution {
    public int[] getLeastNumbers(int[] arr, int k) {
        int[] res = new int[k];
        if (k <= 0) {
            return res;
        }
        if (k >= arr.length) {
            return arr;
        }
        quickSort(arr);
        int index = 0;
        while (index < k) {
            res[index] = arr[index];
            index++;
        }
        return res;
    }
    // 快速排序
    public void quickSort(int[] arr) {
        quickSortHelper(arr, 0, arr.length - 1);
    }
    public void quickSortHelper(int[] arr, int left, int right) {
        if (left >= right) {
            return;
        }
        int pos = partition(arr, left, right);
        quickSortHelper(arr, left, pos - 1);
        quickSortHelper(arr, pos + 1, right);
    }
    public int partition(int[] arr, int left, int right) {
        int baseIndex = right;
        int baseValue = arr[baseIndex];
        while (left < right) {
            while (left < right && arr[left] <= baseValue) {
                left++;
            }
            while (left < right && arr[right] >= baseValue) {
                right--;
            }
            swap(arr, left, right);
        }
        swap(arr, left, baseIndex);
        return left;
    }
    public void swap(int[] arr, int x, int y) {
        int tmp = arr[x];
        arr[x] = arr[y];
        arr[y] = tmp;
    }
}
