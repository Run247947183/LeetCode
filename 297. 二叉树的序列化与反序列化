# LeetCode
力扣
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        if (root == null) {
            return null;
        }
        StringBuilder sb = new StringBuilder("[");
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        while (!queue.isEmpty()) {
            TreeNode cur = queue.poll();
            if (cur == null) {
                sb.append("null,");
            } else {
                sb.append(cur.val + ",");
                queue.offer(cur.left);
                queue.offer(cur.right);
            }
        }
        sb.deleteCharAt(sb.length() - 1);
        sb.append("]");
        return sb.toString();
    }
    

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if (data == null) {
            return null;
        }
        String[] str = data.substring(1, data.length() - 1).split(",");
        Queue<TreeNode> queue = new LinkedList<>();
        TreeNode root = helper(str[0]);
        boolean tag = true;
        TreeNode parent = root;
        for (int i = 1; i < str.length; i++) {
            TreeNode cur = helper(str[i]);
            if (tag) {
                parent.left = cur;
            } else {
                parent.right = cur;
            }
            if (cur != null) {
                queue.offer(cur);
            }
            tag = !tag;
            if (tag) {
                // 表示这一层添加完成，要切换到下一层
                parent = queue.poll();
            }
        }
        return root;
    }
    // 将字符串替换成节点
    public TreeNode helper(String s) {
        if (s.equals("null")) {
            return null;
        }
        return new TreeNode(Integer.valueOf(s));
    }
}

// public class Codec {
//     public String serialize(TreeNode root) {
//         StringBuilder res = new StringBuilder("[");
//         Queue<TreeNode> queue = new LinkedList();
//         queue.add(root);
//         while(!queue.isEmpty()){
//             TreeNode cur = queue.remove();
//             if(cur == null){
//                 res.append("null,");
//             }else{
//                 res.append(cur.val + ",");
//                 queue.add(cur.left);
//                 queue.add(cur.right);
//             }
//         }
//         res.setLength(res.length() - 1);
//         res.append("]");
//         return res.toString();
//     }

//     public TreeNode deserialize(String data) {
//         String[] nodes = data.substring(1, data.length()-1).split(",");
//         TreeNode root = getNode(nodes[0]);
//         Queue<TreeNode> parents = new LinkedList();
//         TreeNode parent = root;
//         boolean isLeft = true;
//         for(int i = 1; i < nodes.length; i++){
//             TreeNode cur = getNode(nodes[i]);
//             if(isLeft){
//                 parent.left = cur;
//             }else{
//                 parent.right = cur;
//             }
//             if(cur != null){
//                 parents.add(cur);
//             }
//             isLeft = !isLeft;
//             if(isLeft){
//                 parent = parents.poll();
//             }
//         }
//         return root;
//     }

//     private TreeNode getNode(String val){
//         if(val.equals("null")){
//             return null;
//         }
//         return new TreeNode(Integer.valueOf(val));
//     }
// }
// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));
