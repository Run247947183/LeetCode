方法一
class Solution {
    // 构造每个下标位置左元素的乘积和右元素的乘积
    // 然后遍历元素，计算每个位置除了本身的其他元素乘积
    public int[] productExceptSelf(int[] nums) {
        int len = nums.length;
        int[] left = new int[len];
        left[0] = 1;
        for (int i = 1; i < len; i++) {
            left[i] = nums[i - 1] * left[i - 1];
        }
        int[] right = new int[len];
        right[len - 1] = 1;
        for (int i = len - 2; i >= 0; i--) {
            right[i] = nums[i + 1] * right[i + 1];
        } 

        int[] res = new int[len];
        for (int i = 0; i < len; i++) {
            res[i] = left[i] * right[i];
        }
        return res;
    }
}

方法二
class Solution {
    // 将返回数组先按照每个元素为该位置左侧所有元素乘积来排列
    // 然后再从原数组左侧开始遍历，每个元素再乘以该位置左侧的元素
    // 这样相对先计算左右数组来说更加快捷，并且节约一个数组的空间
    public int[] productExceptSelf(int[] nums) {
        int len = nums.length;
        int[] res = new int[len];
        res[0] = 1;
        for (int i = 1; i < len; i++) {
            res[i] = nums[i - 1] * res[i - 1];
        }
        int sumRight = 1;
        for (int i = len - 1; i >= 0; i--) {
            res[i] *= sumRight;
            sumRight *= nums[i];
        }
        return res;
    }
}
