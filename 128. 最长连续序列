class Solution {
    // 因为题目要求 O(n)，所以可以采取 Hash 表方法，降低时间复杂度
    // 要求是连续的最长子序列，如果现在数组中存在这样一条连续的子序列
    // 2, 3, 4, 5 但是它们的原始排序是打乱的，如果先遍历到 3，那么我们通过 hash 表判断
    // 是否存在比 3 - 1 的数字存在，这样找到子序列的开头 2，开始计算子序列的长度
    // 那么在遍历到不是 2 的其他数字，例如 3，4时，我们就可以避免去计算它们的子序列长度
    // 因为它并不是子序列中最小的开头的那个数字 
    public int longestConsecutive(int[] nums) {
        // 特殊情况排除
        if (nums.length == 0) {
            return 0;
        }
        if (nums.length == 1) {
            return 1;
        }
        // 将数组元素加入 Hash 表，便于后序 O(1) 判断
        HashSet<Integer> set = new HashSet<>(); 
        for (int x : nums) {
            set.add(x);
        }
        int maxSize = 0;
        for (int num : nums) {
            // 存在比 num 更小的树，则不进行计算
            if (!set.contains(num - 1)) {
                // 找到以 num 打头的子序列
                int goal = num;
                int count = 1;
                // 开始计算其子序列的长度
                while (set.contains(goal + 1)) {
                    goal++;
                    count++;
                }
                maxSize = Math.max(maxSize, count);
            }
        }
        return maxSize;
    }
}
