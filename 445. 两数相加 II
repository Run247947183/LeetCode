/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode head1 = helper(l1); // 将 l1 反转
        ListNode head2 = helper(l2); // 将 l2 反转
        ListNode newHead = new ListNode(-1); // 新链表
        ListNode tail = newHead;
        int tmp = 0; // 统计进位
        int res = 0; // 统计当前位置剩余数字大小
        boolean tag = false; // 判断 head1 是否为 null
        boolean tag1 = false; // 判断 head2 是否为 null
        // 只要 head1 和 head2 还有不为 null 的就继续往下添加节点
        while (!tag || !tag1) {
            int sum = tmp;
            if (!tag) {
                sum += head1.val;
            }
            if (!tag1) {
                sum += head2.val;
            }
            if (sum >= 10) {
                tmp = sum / 10;
                res = sum - tmp * 10;
            } else {
                res = sum;
                tmp = 0;
            }
            tail.next = new ListNode(res);
            tail = tail.next;
            if (!tag) {
                head1 = head1.next;
                tag = head1 == null ? true : false;
            }
            if (!tag1) {
                head2 = head2.next;
                tag1 = head2 == null ? true : false;
            }
        }
        // 如果 tmp 不为 0，说明还有进位
        if (tmp != 0) {
            tail.next = new ListNode(tmp);
        }
        // 注意最后要返回新链表反转后的节点
        return helper(newHead.next);
    }
    // 反转链表
    public ListNode helper(ListNode p) {
        ListNode Next = null;
        ListNode prev = null;
        while (p != null) {
            Next = p.next;
            p.next = prev;
            prev = p;
            p = Next;
        }
        return prev;
    }
}
