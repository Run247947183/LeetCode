/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public void flatten(TreeNode root) {
        if (root == null || (root.left == null && root.right == null)) {
            return;
        }
        // 找到当前 root 节点左子节点的最右节点，假设为 cur
        // 然后将 root 的右节点全部移到 cur 的右子节点
        // 然后将 root = root.right，继续变量，查看是否还有节点存在左子树
        // 如果存在，也是同样重复的做法
        while (cur != null) {
            if (cur.left != null) {
                TreeNode Next = cur.left;
                TreeNode nextRight = Next;
                while (nextRight.right != null) {
                    nextRight = nextRight.right;
                }
                nextRight.right = cur.right;
                cur.left = null;
                cur.right = Next;
            }
            cur = cur.right;
        }
    }
}
